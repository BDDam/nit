# Production AST nodes full definition.
# This file was generated by SableCC (http://www.sablecc.org/).
module parser_prod

import lexer
intrude import parser_nodes
private import tables

redef class AModule
	private init empty_init do end

	init init_amodule (
		nmoduledecl: nullable AModuledecl,
		nimports: Collection[Object], # Should be Collection[AImport]
		nextern_code_blocks: Collection[Object], # Should be Collection[AExternCodeBlock]
		nclassdefs: Collection[Object] # Should be Collection[AClassdef]
	)
	do
		empty_init
		_n_moduledecl = nmoduledecl
		if nmoduledecl != null then nmoduledecl.parent = self
		_n_imports.unsafe_add_all(nimports)
		_n_extern_code_blocks.unsafe_add_all(nextern_code_blocks)
		_n_classdefs.unsafe_add_all(nclassdefs)
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_moduledecl == old_child then
			n_moduledecl = new_child.as(nullable AModuledecl)
			return
		end
		if _n_imports.replace_child(old_child, new_child) then return
		if _n_extern_code_blocks.replace_child(old_child, new_child) then return
		if _n_classdefs.replace_child(old_child, new_child) then return
	end

	redef fun n_moduledecl=(node)
	do
		_n_moduledecl = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_moduledecl)
		_n_imports.visit_all(v)
		_n_extern_code_blocks.visit_all(v)
		_n_classdefs.visit_all(v)
	end
end
redef class AModuledecl
	private init empty_init do end

	init init_amoduledecl (
		ndoc: nullable ADoc,
		nkwmodule: nullable TKwmodule,
		nname: nullable AModuleName,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwmodule = nkwmodule.as(not null)
		nkwmodule.parent = self
		_n_name = nname.as(not null)
		nname.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwmodule == old_child then
			n_kwmodule = new_child.as(TKwmodule)
			return
		end
		if _n_name == old_child then
			n_name = new_child.as(AModuleName)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwmodule=(node)
	do
		_n_kwmodule = node
		node.parent = self
	end
	redef fun n_name=(node)
	do
		_n_name = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwmodule)
		v.enter_visit(_n_name)
		v.enter_visit(_n_annotations)
	end
end
redef class AStdImport
	private init empty_init do end

	init init_astdimport (
		nvisibility: nullable AVisibility,
		nkwimport: nullable TKwimport,
		nname: nullable AModuleName,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwimport = nkwimport.as(not null)
		nkwimport.parent = self
		_n_name = nname.as(not null)
		nname.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwimport == old_child then
			n_kwimport = new_child.as(TKwimport)
			return
		end
		if _n_name == old_child then
			n_name = new_child.as(AModuleName)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwimport=(node)
	do
		_n_kwimport = node
		node.parent = self
	end
	redef fun n_name=(node)
	do
		_n_name = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwimport)
		v.enter_visit(_n_name)
		v.enter_visit(_n_annotations)
	end
end
redef class ANoImport
	private init empty_init do end

	init init_anoimport (
		nvisibility: nullable AVisibility,
		nkwimport: nullable TKwimport,
		nkwend: nullable TKwend
	)
	do
		empty_init
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwimport = nkwimport.as(not null)
		nkwimport.parent = self
		_n_kwend = nkwend.as(not null)
		nkwend.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwimport == old_child then
			n_kwimport = new_child.as(TKwimport)
			return
		end
		if _n_kwend == old_child then
			n_kwend = new_child.as(TKwend)
			return
		end
	end

	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwimport=(node)
	do
		_n_kwimport = node
		node.parent = self
	end
	redef fun n_kwend=(node)
	do
		_n_kwend = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwimport)
		v.enter_visit(_n_kwend)
	end
end
redef class APublicVisibility
	private init empty_init do end

	init init_apublicvisibility
	do
		empty_init
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
	end



	redef fun visit_all(v: Visitor)
	do
	end
end
redef class APrivateVisibility
	private init empty_init do end

	init init_aprivatevisibility (
		nkwprivate: nullable TKwprivate
	)
	do
		empty_init
		_n_kwprivate = nkwprivate.as(not null)
		nkwprivate.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwprivate == old_child then
			n_kwprivate = new_child.as(TKwprivate)
			return
		end
	end

	redef fun n_kwprivate=(node)
	do
		_n_kwprivate = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwprivate)
	end
end
redef class AProtectedVisibility
	private init empty_init do end

	init init_aprotectedvisibility (
		nkwprotected: nullable TKwprotected
	)
	do
		empty_init
		_n_kwprotected = nkwprotected.as(not null)
		nkwprotected.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwprotected == old_child then
			n_kwprotected = new_child.as(TKwprotected)
			return
		end
	end

	redef fun n_kwprotected=(node)
	do
		_n_kwprotected = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwprotected)
	end
end
redef class AIntrudeVisibility
	private init empty_init do end

	init init_aintrudevisibility (
		nkwintrude: nullable TKwintrude
	)
	do
		empty_init
		_n_kwintrude = nkwintrude.as(not null)
		nkwintrude.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwintrude == old_child then
			n_kwintrude = new_child.as(TKwintrude)
			return
		end
	end

	redef fun n_kwintrude=(node)
	do
		_n_kwintrude = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwintrude)
	end
end
redef class AStdClassdef
	private init empty_init do end

	init init_astdclassdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nclasskind: nullable AClasskind,
		nid: nullable TClassid,
		nformaldefs: Collection[Object], # Should be Collection[AFormaldef]
		nannotations: nullable AAnnotations,
		nextern_code_block: nullable AExternCodeBlock,
		nsuperclasses: Collection[Object], # Should be Collection[ASuperclass]
		npropdefs: Collection[Object], # Should be Collection[APropdef]
		nkwend: nullable TKwend
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_classkind = nclasskind.as(not null)
		nclasskind.parent = self
		_n_id = nid
		if nid != null then nid.parent = self
		_n_formaldefs.unsafe_add_all(nformaldefs)
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
		_n_extern_code_block = nextern_code_block
		if nextern_code_block != null then nextern_code_block.parent = self
		_n_superclasses.unsafe_add_all(nsuperclasses)
		_n_propdefs.unsafe_add_all(npropdefs)
		_n_kwend = nkwend.as(not null)
		nkwend.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_classkind == old_child then
			n_classkind = new_child.as(AClasskind)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(nullable TClassid)
			return
		end
		if _n_formaldefs.replace_child(old_child, new_child) then return
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
		if _n_extern_code_block == old_child then
			n_extern_code_block = new_child.as(nullable AExternCodeBlock)
			return
		end
		if _n_superclasses.replace_child(old_child, new_child) then return
		if _n_propdefs.replace_child(old_child, new_child) then return
		if _n_kwend == old_child then
			n_kwend = new_child.as(TKwend)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_classkind=(node)
	do
		_n_classkind = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		if node != null then node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end
	redef fun n_extern_code_block=(node)
	do
		_n_extern_code_block = node
		if node != null then node.parent = self
	end
	redef fun n_kwend=(node)
	do
		_n_kwend = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_classkind)
		v.enter_visit(_n_id)
		_n_formaldefs.visit_all(v)
		v.enter_visit(_n_annotations)
		v.enter_visit(_n_extern_code_block)
		_n_superclasses.visit_all(v)
		_n_propdefs.visit_all(v)
		v.enter_visit(_n_kwend)
	end
end
redef class ATopClassdef
	private init empty_init do end

	init init_atopclassdef (
		npropdefs: Collection[Object] # Should be Collection[APropdef]
	)
	do
		empty_init
		_n_propdefs.unsafe_add_all(npropdefs)
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_propdefs.replace_child(old_child, new_child) then return
	end



	redef fun visit_all(v: Visitor)
	do
		_n_propdefs.visit_all(v)
	end
end
redef class AMainClassdef
	private init empty_init do end

	init init_amainclassdef (
		npropdefs: Collection[Object] # Should be Collection[APropdef]
	)
	do
		empty_init
		_n_propdefs.unsafe_add_all(npropdefs)
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_propdefs.replace_child(old_child, new_child) then return
	end



	redef fun visit_all(v: Visitor)
	do
		_n_propdefs.visit_all(v)
	end
end
redef class AConcreteClasskind
	private init empty_init do end

	init init_aconcreteclasskind (
		nkwclass: nullable TKwclass
	)
	do
		empty_init
		_n_kwclass = nkwclass.as(not null)
		nkwclass.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwclass == old_child then
			n_kwclass = new_child.as(TKwclass)
			return
		end
	end

	redef fun n_kwclass=(node)
	do
		_n_kwclass = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwclass)
	end
end
redef class AAbstractClasskind
	private init empty_init do end

	init init_aabstractclasskind (
		nkwabstract: nullable TKwabstract,
		nkwclass: nullable TKwclass
	)
	do
		empty_init
		_n_kwabstract = nkwabstract.as(not null)
		nkwabstract.parent = self
		_n_kwclass = nkwclass.as(not null)
		nkwclass.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwabstract == old_child then
			n_kwabstract = new_child.as(TKwabstract)
			return
		end
		if _n_kwclass == old_child then
			n_kwclass = new_child.as(TKwclass)
			return
		end
	end

	redef fun n_kwabstract=(node)
	do
		_n_kwabstract = node
		node.parent = self
	end
	redef fun n_kwclass=(node)
	do
		_n_kwclass = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwabstract)
		v.enter_visit(_n_kwclass)
	end
end
redef class AInterfaceClasskind
	private init empty_init do end

	init init_ainterfaceclasskind (
		nkwinterface: nullable TKwinterface
	)
	do
		empty_init
		_n_kwinterface = nkwinterface.as(not null)
		nkwinterface.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwinterface == old_child then
			n_kwinterface = new_child.as(TKwinterface)
			return
		end
	end

	redef fun n_kwinterface=(node)
	do
		_n_kwinterface = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwinterface)
	end
end
redef class AEnumClasskind
	private init empty_init do end

	init init_aenumclasskind (
		nkwenum: nullable TKwenum
	)
	do
		empty_init
		_n_kwenum = nkwenum.as(not null)
		nkwenum.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwenum == old_child then
			n_kwenum = new_child.as(TKwenum)
			return
		end
	end

	redef fun n_kwenum=(node)
	do
		_n_kwenum = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwenum)
	end
end
redef class AExternClasskind
	private init empty_init do end

	init init_aexternclasskind (
		nkwextern: nullable TKwextern,
		nkwclass: nullable TKwclass
	)
	do
		empty_init
		_n_kwextern = nkwextern.as(not null)
		nkwextern.parent = self
		_n_kwclass = nkwclass
		if nkwclass != null then nkwclass.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwextern == old_child then
			n_kwextern = new_child.as(TKwextern)
			return
		end
		if _n_kwclass == old_child then
			n_kwclass = new_child.as(nullable TKwclass)
			return
		end
	end

	redef fun n_kwextern=(node)
	do
		_n_kwextern = node
		node.parent = self
	end
	redef fun n_kwclass=(node)
	do
		_n_kwclass = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwextern)
		v.enter_visit(_n_kwclass)
	end
end
redef class AFormaldef
	private init empty_init do end

	init init_aformaldef (
		nid: nullable TClassid,
		ntype: nullable AType,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
		_n_type = ntype
		if ntype != null then ntype.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TClassid)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(nullable AType)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		if node != null then node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
		v.enter_visit(_n_type)
		v.enter_visit(_n_annotations)
	end
end
redef class ASuperclass
	private init empty_init do end

	init init_asuperclass (
		nkwsuper: nullable TKwsuper,
		ntype: nullable AType,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_kwsuper = nkwsuper.as(not null)
		nkwsuper.parent = self
		_n_type = ntype.as(not null)
		ntype.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwsuper == old_child then
			n_kwsuper = new_child.as(TKwsuper)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_kwsuper=(node)
	do
		_n_kwsuper = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwsuper)
		v.enter_visit(_n_type)
		v.enter_visit(_n_annotations)
	end
end
redef class AAttrPropdef
	private init empty_init do end

	init init_aattrpropdef (
		ndoc: nullable ADoc,
		nreadable: nullable AAble,
		nwritable: nullable AAble,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwvar: nullable TKwvar,
		nid: nullable TAttrid,
		nid2: nullable TId,
		ntype: nullable AType,
		nannotations: nullable AAnnotations,
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_readable = nreadable
		if nreadable != null then nreadable.parent = self
		_n_writable = nwritable
		if nwritable != null then nwritable.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwvar = nkwvar.as(not null)
		nkwvar.parent = self
		_n_id = nid
		if nid != null then nid.parent = self
		_n_id2 = nid2
		if nid2 != null then nid2.parent = self
		_n_type = ntype
		if ntype != null then ntype.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
		_n_expr = nexpr
		if nexpr != null then nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_readable == old_child then
			n_readable = new_child.as(nullable AAble)
			return
		end
		if _n_writable == old_child then
			n_writable = new_child.as(nullable AAble)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwvar == old_child then
			n_kwvar = new_child.as(TKwvar)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(nullable TAttrid)
			return
		end
		if _n_id2 == old_child then
			n_id2 = new_child.as(nullable TId)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(nullable AType)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_readable=(node)
	do
		_n_readable = node
		if node != null then node.parent = self
	end
	redef fun n_writable=(node)
	do
		_n_writable = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwvar=(node)
	do
		_n_kwvar = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		if node != null then node.parent = self
	end
	redef fun n_id2=(node)
	do
		_n_id2 = node
		if node != null then node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		if node != null then node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_readable)
		v.enter_visit(_n_writable)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwvar)
		v.enter_visit(_n_id)
		v.enter_visit(_n_id2)
		v.enter_visit(_n_type)
		v.enter_visit(_n_annotations)
		v.enter_visit(_n_expr)
	end
end
redef class AMethPropdef
	private init empty_init do end

	init init_amethpropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nmethid: nullable AMethid,
		nsignature: nullable ASignature
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_methid = nmethid.as(not null)
		nmethid.parent = self
		_n_signature = nsignature.as(not null)
		nsignature.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(AMethid)
			return
		end
		if _n_signature == old_child then
			n_signature = new_child.as(ASignature)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		node.parent = self
	end
	redef fun n_signature=(node)
	do
		_n_signature = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_methid)
		v.enter_visit(_n_signature)
	end
end
redef class ADeferredMethPropdef
	private init empty_init do end

	init init_adeferredmethpropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwmeth: nullable TKwmeth,
		nmethid: nullable AMethid,
		nsignature: nullable ASignature,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwmeth = nkwmeth.as(not null)
		nkwmeth.parent = self
		_n_methid = nmethid.as(not null)
		nmethid.parent = self
		_n_signature = nsignature.as(not null)
		nsignature.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwmeth == old_child then
			n_kwmeth = new_child.as(TKwmeth)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(AMethid)
			return
		end
		if _n_signature == old_child then
			n_signature = new_child.as(ASignature)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwmeth=(node)
	do
		_n_kwmeth = node
		node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		node.parent = self
	end
	redef fun n_signature=(node)
	do
		_n_signature = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwmeth)
		v.enter_visit(_n_methid)
		v.enter_visit(_n_signature)
		v.enter_visit(_n_annotations)
	end
end
redef class AInternMethPropdef
	private init empty_init do end

	init init_ainternmethpropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwmeth: nullable TKwmeth,
		nmethid: nullable AMethid,
		nsignature: nullable ASignature
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwmeth = nkwmeth.as(not null)
		nkwmeth.parent = self
		_n_methid = nmethid.as(not null)
		nmethid.parent = self
		_n_signature = nsignature.as(not null)
		nsignature.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwmeth == old_child then
			n_kwmeth = new_child.as(TKwmeth)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(AMethid)
			return
		end
		if _n_signature == old_child then
			n_signature = new_child.as(ASignature)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwmeth=(node)
	do
		_n_kwmeth = node
		node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		node.parent = self
	end
	redef fun n_signature=(node)
	do
		_n_signature = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwmeth)
		v.enter_visit(_n_methid)
		v.enter_visit(_n_signature)
	end
end
redef class AExternMethPropdef
	private init empty_init do end

	init init_aexternmethpropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwmeth: nullable TKwmeth,
		nmethid: nullable AMethid,
		nsignature: nullable ASignature,
		nextern: nullable TString,
		nextern_calls: nullable AExternCalls,
		nextern_code_block: nullable AExternCodeBlock
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwmeth = nkwmeth.as(not null)
		nkwmeth.parent = self
		_n_methid = nmethid.as(not null)
		nmethid.parent = self
		_n_signature = nsignature.as(not null)
		nsignature.parent = self
		_n_extern = nextern
		if nextern != null then nextern.parent = self
		_n_extern_calls = nextern_calls
		if nextern_calls != null then nextern_calls.parent = self
		_n_extern_code_block = nextern_code_block
		if nextern_code_block != null then nextern_code_block.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwmeth == old_child then
			n_kwmeth = new_child.as(TKwmeth)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(AMethid)
			return
		end
		if _n_signature == old_child then
			n_signature = new_child.as(ASignature)
			return
		end
		if _n_extern == old_child then
			n_extern = new_child.as(nullable TString)
			return
		end
		if _n_extern_calls == old_child then
			n_extern_calls = new_child.as(nullable AExternCalls)
			return
		end
		if _n_extern_code_block == old_child then
			n_extern_code_block = new_child.as(nullable AExternCodeBlock)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwmeth=(node)
	do
		_n_kwmeth = node
		node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		node.parent = self
	end
	redef fun n_signature=(node)
	do
		_n_signature = node
		node.parent = self
	end
	redef fun n_extern=(node)
	do
		_n_extern = node
		if node != null then node.parent = self
	end
	redef fun n_extern_calls=(node)
	do
		_n_extern_calls = node
		if node != null then node.parent = self
	end
	redef fun n_extern_code_block=(node)
	do
		_n_extern_code_block = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwmeth)
		v.enter_visit(_n_methid)
		v.enter_visit(_n_signature)
		v.enter_visit(_n_extern)
		v.enter_visit(_n_extern_calls)
		v.enter_visit(_n_extern_code_block)
	end
end
redef class AConcreteMethPropdef
	private init empty_init do end

	init init_aconcretemethpropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwmeth: nullable TKwmeth,
		nmethid: nullable AMethid,
		nsignature: nullable ASignature,
		nannotations: nullable AAnnotations,
		nblock: nullable AExpr
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwmeth = nkwmeth.as(not null)
		nkwmeth.parent = self
		_n_methid = nmethid.as(not null)
		nmethid.parent = self
		_n_signature = nsignature.as(not null)
		nsignature.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
		_n_block = nblock
		if nblock != null then nblock.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwmeth == old_child then
			n_kwmeth = new_child.as(TKwmeth)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(AMethid)
			return
		end
		if _n_signature == old_child then
			n_signature = new_child.as(ASignature)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
		if _n_block == old_child then
			n_block = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwmeth=(node)
	do
		_n_kwmeth = node
		node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		node.parent = self
	end
	redef fun n_signature=(node)
	do
		_n_signature = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end
	redef fun n_block=(node)
	do
		_n_block = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwmeth)
		v.enter_visit(_n_methid)
		v.enter_visit(_n_signature)
		v.enter_visit(_n_annotations)
		v.enter_visit(_n_block)
	end
end
redef class AConcreteInitPropdef
	private init empty_init do end

	init init_aconcreteinitpropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwinit: nullable TKwinit,
		nmethid: nullable AMethid,
		nsignature: nullable ASignature,
		nannotations: nullable AAnnotations,
		nblock: nullable AExpr
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwinit = nkwinit.as(not null)
		nkwinit.parent = self
		_n_methid = nmethid
		if nmethid != null then nmethid.parent = self
		_n_signature = nsignature.as(not null)
		nsignature.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
		_n_block = nblock
		if nblock != null then nblock.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwinit == old_child then
			n_kwinit = new_child.as(TKwinit)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(nullable AMethid)
			return
		end
		if _n_signature == old_child then
			n_signature = new_child.as(ASignature)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
		if _n_block == old_child then
			n_block = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwinit=(node)
	do
		_n_kwinit = node
		node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		if node != null then node.parent = self
	end
	redef fun n_signature=(node)
	do
		_n_signature = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end
	redef fun n_block=(node)
	do
		_n_block = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwinit)
		v.enter_visit(_n_methid)
		v.enter_visit(_n_signature)
		v.enter_visit(_n_annotations)
		v.enter_visit(_n_block)
	end
end
redef class AExternInitPropdef
	private init empty_init do end

	init init_aexterninitpropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwnew: nullable TKwnew,
		nmethid: nullable AMethid,
		nsignature: nullable ASignature,
		nextern: nullable TString,
		nextern_calls: nullable AExternCalls,
		nextern_code_block: nullable AExternCodeBlock
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwnew = nkwnew.as(not null)
		nkwnew.parent = self
		_n_methid = nmethid
		if nmethid != null then nmethid.parent = self
		_n_signature = nsignature.as(not null)
		nsignature.parent = self
		_n_extern = nextern
		if nextern != null then nextern.parent = self
		_n_extern_calls = nextern_calls
		if nextern_calls != null then nextern_calls.parent = self
		_n_extern_code_block = nextern_code_block
		if nextern_code_block != null then nextern_code_block.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwnew == old_child then
			n_kwnew = new_child.as(TKwnew)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(nullable AMethid)
			return
		end
		if _n_signature == old_child then
			n_signature = new_child.as(ASignature)
			return
		end
		if _n_extern == old_child then
			n_extern = new_child.as(nullable TString)
			return
		end
		if _n_extern_calls == old_child then
			n_extern_calls = new_child.as(nullable AExternCalls)
			return
		end
		if _n_extern_code_block == old_child then
			n_extern_code_block = new_child.as(nullable AExternCodeBlock)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwnew=(node)
	do
		_n_kwnew = node
		node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		if node != null then node.parent = self
	end
	redef fun n_signature=(node)
	do
		_n_signature = node
		node.parent = self
	end
	redef fun n_extern=(node)
	do
		_n_extern = node
		if node != null then node.parent = self
	end
	redef fun n_extern_calls=(node)
	do
		_n_extern_calls = node
		if node != null then node.parent = self
	end
	redef fun n_extern_code_block=(node)
	do
		_n_extern_code_block = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwnew)
		v.enter_visit(_n_methid)
		v.enter_visit(_n_signature)
		v.enter_visit(_n_extern)
		v.enter_visit(_n_extern_calls)
		v.enter_visit(_n_extern_code_block)
	end
end
redef class AMainMethPropdef
	private init empty_init do end

	init init_amainmethpropdef (
		nkwredef: nullable TKwredef,
		nblock: nullable AExpr
	)
	do
		empty_init
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_block = nblock
		if nblock != null then nblock.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_block == old_child then
			n_block = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_block=(node)
	do
		_n_block = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_block)
	end
end
redef class ATypePropdef
	private init empty_init do end

	init init_atypepropdef (
		ndoc: nullable ADoc,
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwtype: nullable TKwtype,
		nid: nullable TClassid,
		ntype: nullable AType,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_doc = ndoc
		if ndoc != null then ndoc.parent = self
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility.as(not null)
		nvisibility.parent = self
		_n_kwtype = nkwtype.as(not null)
		nkwtype.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_type = ntype.as(not null)
		ntype.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_doc == old_child then
			n_doc = new_child.as(nullable ADoc)
			return
		end
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(AVisibility)
			return
		end
		if _n_kwtype == old_child then
			n_kwtype = new_child.as(TKwtype)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TClassid)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_doc=(node)
	do
		_n_doc = node
		if node != null then node.parent = self
	end
	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		node.parent = self
	end
	redef fun n_kwtype=(node)
	do
		_n_kwtype = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_doc)
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwtype)
		v.enter_visit(_n_id)
		v.enter_visit(_n_type)
		v.enter_visit(_n_annotations)
	end
end
redef class AReadAble
	private init empty_init do end

	init init_areadable (
		nkwredef: nullable TKwredef,
		nkwreadable: nullable TKwreadable
	)
	do
		empty_init
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_kwreadable = nkwreadable.as(not null)
		nkwreadable.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_kwreadable == old_child then
			n_kwreadable = new_child.as(TKwreadable)
			return
		end
	end

	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_kwreadable=(node)
	do
		_n_kwreadable = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_kwreadable)
	end
end
redef class AWriteAble
	private init empty_init do end

	init init_awriteable (
		nkwredef: nullable TKwredef,
		nvisibility: nullable AVisibility,
		nkwwritable: nullable TKwwritable
	)
	do
		empty_init
		_n_kwredef = nkwredef
		if nkwredef != null then nkwredef.parent = self
		_n_visibility = nvisibility
		if nvisibility != null then nvisibility.parent = self
		_n_kwwritable = nkwwritable.as(not null)
		nkwwritable.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwredef == old_child then
			n_kwredef = new_child.as(nullable TKwredef)
			return
		end
		if _n_visibility == old_child then
			n_visibility = new_child.as(nullable AVisibility)
			return
		end
		if _n_kwwritable == old_child then
			n_kwwritable = new_child.as(TKwwritable)
			return
		end
	end

	redef fun n_kwredef=(node)
	do
		_n_kwredef = node
		if node != null then node.parent = self
	end
	redef fun n_visibility=(node)
	do
		_n_visibility = node
		if node != null then node.parent = self
	end
	redef fun n_kwwritable=(node)
	do
		_n_kwwritable = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwredef)
		v.enter_visit(_n_visibility)
		v.enter_visit(_n_kwwritable)
	end
end
redef class AIdMethid
	private init empty_init do end

	init init_aidmethid (
		nid: nullable TId
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end
redef class APlusMethid
	private init empty_init do end

	init init_aplusmethid (
		nplus: nullable TPlus
	)
	do
		empty_init
		_n_plus = nplus.as(not null)
		nplus.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_plus == old_child then
			n_plus = new_child.as(TPlus)
			return
		end
	end

	redef fun n_plus=(node)
	do
		_n_plus = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_plus)
	end
end
redef class AMinusMethid
	private init empty_init do end

	init init_aminusmethid (
		nminus: nullable TMinus
	)
	do
		empty_init
		_n_minus = nminus.as(not null)
		nminus.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_minus == old_child then
			n_minus = new_child.as(TMinus)
			return
		end
	end

	redef fun n_minus=(node)
	do
		_n_minus = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_minus)
	end
end
redef class AStarMethid
	private init empty_init do end

	init init_astarmethid (
		nstar: nullable TStar
	)
	do
		empty_init
		_n_star = nstar.as(not null)
		nstar.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_star == old_child then
			n_star = new_child.as(TStar)
			return
		end
	end

	redef fun n_star=(node)
	do
		_n_star = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_star)
	end
end
redef class ASlashMethid
	private init empty_init do end

	init init_aslashmethid (
		nslash: nullable TSlash
	)
	do
		empty_init
		_n_slash = nslash.as(not null)
		nslash.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_slash == old_child then
			n_slash = new_child.as(TSlash)
			return
		end
	end

	redef fun n_slash=(node)
	do
		_n_slash = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_slash)
	end
end
redef class APercentMethid
	private init empty_init do end

	init init_apercentmethid (
		npercent: nullable TPercent
	)
	do
		empty_init
		_n_percent = npercent.as(not null)
		npercent.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_percent == old_child then
			n_percent = new_child.as(TPercent)
			return
		end
	end

	redef fun n_percent=(node)
	do
		_n_percent = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_percent)
	end
end
redef class AEqMethid
	private init empty_init do end

	init init_aeqmethid (
		neq: nullable TEq
	)
	do
		empty_init
		_n_eq = neq.as(not null)
		neq.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_eq == old_child then
			n_eq = new_child.as(TEq)
			return
		end
	end

	redef fun n_eq=(node)
	do
		_n_eq = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_eq)
	end
end
redef class ANeMethid
	private init empty_init do end

	init init_anemethid (
		nne: nullable TNe
	)
	do
		empty_init
		_n_ne = nne.as(not null)
		nne.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_ne == old_child then
			n_ne = new_child.as(TNe)
			return
		end
	end

	redef fun n_ne=(node)
	do
		_n_ne = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_ne)
	end
end
redef class ALeMethid
	private init empty_init do end

	init init_alemethid (
		nle: nullable TLe
	)
	do
		empty_init
		_n_le = nle.as(not null)
		nle.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_le == old_child then
			n_le = new_child.as(TLe)
			return
		end
	end

	redef fun n_le=(node)
	do
		_n_le = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_le)
	end
end
redef class AGeMethid
	private init empty_init do end

	init init_agemethid (
		nge: nullable TGe
	)
	do
		empty_init
		_n_ge = nge.as(not null)
		nge.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_ge == old_child then
			n_ge = new_child.as(TGe)
			return
		end
	end

	redef fun n_ge=(node)
	do
		_n_ge = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_ge)
	end
end
redef class ALtMethid
	private init empty_init do end

	init init_altmethid (
		nlt: nullable TLt
	)
	do
		empty_init
		_n_lt = nlt.as(not null)
		nlt.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_lt == old_child then
			n_lt = new_child.as(TLt)
			return
		end
	end

	redef fun n_lt=(node)
	do
		_n_lt = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_lt)
	end
end
redef class AGtMethid
	private init empty_init do end

	init init_agtmethid (
		ngt: nullable TGt
	)
	do
		empty_init
		_n_gt = ngt.as(not null)
		ngt.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_gt == old_child then
			n_gt = new_child.as(TGt)
			return
		end
	end

	redef fun n_gt=(node)
	do
		_n_gt = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_gt)
	end
end
redef class ALlMethid
	private init empty_init do end

	init init_allmethid (
		nll: nullable TLl
	)
	do
		empty_init
		_n_ll = nll.as(not null)
		nll.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_ll == old_child then
			n_ll = new_child.as(TLl)
			return
		end
	end

	redef fun n_ll=(node)
	do
		_n_ll = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_ll)
	end
end
redef class AGgMethid
	private init empty_init do end

	init init_aggmethid (
		ngg: nullable TGg
	)
	do
		empty_init
		_n_gg = ngg.as(not null)
		ngg.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_gg == old_child then
			n_gg = new_child.as(TGg)
			return
		end
	end

	redef fun n_gg=(node)
	do
		_n_gg = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_gg)
	end
end
redef class ABraMethid
	private init empty_init do end

	init init_abramethid (
		nobra: nullable TObra,
		ncbra: nullable TCbra
	)
	do
		empty_init
		_n_obra = nobra.as(not null)
		nobra.parent = self
		_n_cbra = ncbra.as(not null)
		ncbra.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_obra == old_child then
			n_obra = new_child.as(TObra)
			return
		end
		if _n_cbra == old_child then
			n_cbra = new_child.as(TCbra)
			return
		end
	end

	redef fun n_obra=(node)
	do
		_n_obra = node
		node.parent = self
	end
	redef fun n_cbra=(node)
	do
		_n_cbra = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_obra)
		v.enter_visit(_n_cbra)
	end
end
redef class AStarshipMethid
	private init empty_init do end

	init init_astarshipmethid (
		nstarship: nullable TStarship
	)
	do
		empty_init
		_n_starship = nstarship.as(not null)
		nstarship.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_starship == old_child then
			n_starship = new_child.as(TStarship)
			return
		end
	end

	redef fun n_starship=(node)
	do
		_n_starship = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_starship)
	end
end
redef class AAssignMethid
	private init empty_init do end

	init init_aassignmethid (
		nid: nullable TId,
		nassign: nullable TAssign
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
		_n_assign = nassign.as(not null)
		nassign.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_assign == old_child then
			n_assign = new_child.as(TAssign)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_assign=(node)
	do
		_n_assign = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
		v.enter_visit(_n_assign)
	end
end
redef class ABraassignMethid
	private init empty_init do end

	init init_abraassignmethid (
		nobra: nullable TObra,
		ncbra: nullable TCbra,
		nassign: nullable TAssign
	)
	do
		empty_init
		_n_obra = nobra.as(not null)
		nobra.parent = self
		_n_cbra = ncbra.as(not null)
		ncbra.parent = self
		_n_assign = nassign.as(not null)
		nassign.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_obra == old_child then
			n_obra = new_child.as(TObra)
			return
		end
		if _n_cbra == old_child then
			n_cbra = new_child.as(TCbra)
			return
		end
		if _n_assign == old_child then
			n_assign = new_child.as(TAssign)
			return
		end
	end

	redef fun n_obra=(node)
	do
		_n_obra = node
		node.parent = self
	end
	redef fun n_cbra=(node)
	do
		_n_cbra = node
		node.parent = self
	end
	redef fun n_assign=(node)
	do
		_n_assign = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_obra)
		v.enter_visit(_n_cbra)
		v.enter_visit(_n_assign)
	end
end
redef class ASignature
	private init empty_init do end

	init init_asignature (
		nopar: nullable TOpar,
		nparams: Collection[Object], # Should be Collection[AParam]
		ncpar: nullable TCpar,
		ntype: nullable AType
	)
	do
		empty_init
		_n_opar = nopar
		if nopar != null then nopar.parent = self
		_n_params.unsafe_add_all(nparams)
		_n_cpar = ncpar
		if ncpar != null then ncpar.parent = self
		_n_type = ntype
		if ntype != null then ntype.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_opar == old_child then
			n_opar = new_child.as(nullable TOpar)
			return
		end
		if _n_params.replace_child(old_child, new_child) then return
		if _n_cpar == old_child then
			n_cpar = new_child.as(nullable TCpar)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(nullable AType)
			return
		end
	end

	redef fun n_opar=(node)
	do
		_n_opar = node
		if node != null then node.parent = self
	end
	redef fun n_cpar=(node)
	do
		_n_cpar = node
		if node != null then node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_opar)
		_n_params.visit_all(v)
		v.enter_visit(_n_cpar)
		v.enter_visit(_n_type)
	end
end
redef class AParam
	private init empty_init do end

	init init_aparam (
		nid: nullable TId,
		ntype: nullable AType,
		ndotdotdot: nullable TDotdotdot,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
		_n_type = ntype
		if ntype != null then ntype.parent = self
		_n_dotdotdot = ndotdotdot
		if ndotdotdot != null then ndotdotdot.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(nullable AType)
			return
		end
		if _n_dotdotdot == old_child then
			n_dotdotdot = new_child.as(nullable TDotdotdot)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		if node != null then node.parent = self
	end
	redef fun n_dotdotdot=(node)
	do
		_n_dotdotdot = node
		if node != null then node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
		v.enter_visit(_n_type)
		v.enter_visit(_n_dotdotdot)
		v.enter_visit(_n_annotations)
	end
end
redef class AType
	private init empty_init do end

	init init_atype (
		nkwnullable: nullable TKwnullable,
		nid: nullable TClassid,
		ntypes: Collection[Object], # Should be Collection[AType]
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_kwnullable = nkwnullable
		if nkwnullable != null then nkwnullable.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_types.unsafe_add_all(ntypes)
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwnullable == old_child then
			n_kwnullable = new_child.as(nullable TKwnullable)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TClassid)
			return
		end
		if _n_types.replace_child(old_child, new_child) then return
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_kwnullable=(node)
	do
		_n_kwnullable = node
		if node != null then node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwnullable)
		v.enter_visit(_n_id)
		_n_types.visit_all(v)
		v.enter_visit(_n_annotations)
	end
end
redef class ALabel
	private init empty_init do end

	init init_alabel (
		nkwlabel: nullable TKwlabel,
		nid: nullable TId
	)
	do
		empty_init
		_n_kwlabel = nkwlabel.as(not null)
		nkwlabel.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwlabel == old_child then
			n_kwlabel = new_child.as(TKwlabel)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
	end

	redef fun n_kwlabel=(node)
	do
		_n_kwlabel = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwlabel)
		v.enter_visit(_n_id)
	end
end
redef class ABlockExpr
	private init empty_init do end

	init init_ablockexpr (
		nexpr: Collection[Object], # Should be Collection[AExpr]
		nkwend: nullable TKwend
	)
	do
		empty_init
		_n_expr.unsafe_add_all(nexpr)
		_n_kwend = nkwend
		if nkwend != null then nkwend.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr.replace_child(old_child, new_child) then return
		if _n_kwend == old_child then
			n_kwend = new_child.as(nullable TKwend)
			return
		end
	end

	redef fun n_kwend=(node)
	do
		_n_kwend = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		_n_expr.visit_all(v)
		v.enter_visit(_n_kwend)
	end
end
redef class AVardeclExpr
	private init empty_init do end

	init init_avardeclexpr (
		nkwvar: nullable TKwvar,
		nid: nullable TId,
		ntype: nullable AType,
		nassign: nullable TAssign,
		nexpr: nullable AExpr,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_kwvar = nkwvar.as(not null)
		nkwvar.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_type = ntype
		if ntype != null then ntype.parent = self
		_n_assign = nassign
		if nassign != null then nassign.parent = self
		_n_expr = nexpr
		if nexpr != null then nexpr.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwvar == old_child then
			n_kwvar = new_child.as(TKwvar)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(nullable AType)
			return
		end
		if _n_assign == old_child then
			n_assign = new_child.as(nullable TAssign)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(nullable AExpr)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_kwvar=(node)
	do
		_n_kwvar = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		if node != null then node.parent = self
	end
	redef fun n_assign=(node)
	do
		_n_assign = node
		if node != null then node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		if node != null then node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwvar)
		v.enter_visit(_n_id)
		v.enter_visit(_n_type)
		v.enter_visit(_n_assign)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_annotations)
	end
end
redef class AReturnExpr
	private init empty_init do end

	init init_areturnexpr (
		nkwreturn: nullable TKwreturn,
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_kwreturn = nkwreturn
		if nkwreturn != null then nkwreturn.parent = self
		_n_expr = nexpr
		if nexpr != null then nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwreturn == old_child then
			n_kwreturn = new_child.as(nullable TKwreturn)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_kwreturn=(node)
	do
		_n_kwreturn = node
		if node != null then node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwreturn)
		v.enter_visit(_n_expr)
	end
end
redef class ABreakExpr
	private init empty_init do end

	init init_abreakexpr (
		nkwbreak: nullable TKwbreak,
		nlabel: nullable ALabel,
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_kwbreak = nkwbreak.as(not null)
		nkwbreak.parent = self
		_n_label = nlabel
		if nlabel != null then nlabel.parent = self
		_n_expr = nexpr
		if nexpr != null then nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwbreak == old_child then
			n_kwbreak = new_child.as(TKwbreak)
			return
		end
		if _n_label == old_child then
			n_label = new_child.as(nullable ALabel)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_kwbreak=(node)
	do
		_n_kwbreak = node
		node.parent = self
	end
	redef fun n_label=(node)
	do
		_n_label = node
		if node != null then node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwbreak)
		v.enter_visit(_n_label)
		v.enter_visit(_n_expr)
	end
end
redef class AAbortExpr
	private init empty_init do end

	init init_aabortexpr (
		nkwabort: nullable TKwabort
	)
	do
		empty_init
		_n_kwabort = nkwabort.as(not null)
		nkwabort.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwabort == old_child then
			n_kwabort = new_child.as(TKwabort)
			return
		end
	end

	redef fun n_kwabort=(node)
	do
		_n_kwabort = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwabort)
	end
end
redef class AContinueExpr
	private init empty_init do end

	init init_acontinueexpr (
		nkwcontinue: nullable TKwcontinue,
		nlabel: nullable ALabel,
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_kwcontinue = nkwcontinue
		if nkwcontinue != null then nkwcontinue.parent = self
		_n_label = nlabel
		if nlabel != null then nlabel.parent = self
		_n_expr = nexpr
		if nexpr != null then nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwcontinue == old_child then
			n_kwcontinue = new_child.as(nullable TKwcontinue)
			return
		end
		if _n_label == old_child then
			n_label = new_child.as(nullable ALabel)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_kwcontinue=(node)
	do
		_n_kwcontinue = node
		if node != null then node.parent = self
	end
	redef fun n_label=(node)
	do
		_n_label = node
		if node != null then node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwcontinue)
		v.enter_visit(_n_label)
		v.enter_visit(_n_expr)
	end
end
redef class ADoExpr
	private init empty_init do end

	init init_adoexpr (
		nkwdo: nullable TKwdo,
		nblock: nullable AExpr,
		nlabel: nullable ALabel
	)
	do
		empty_init
		_n_kwdo = nkwdo.as(not null)
		nkwdo.parent = self
		_n_block = nblock
		if nblock != null then nblock.parent = self
		_n_label = nlabel
		if nlabel != null then nlabel.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwdo == old_child then
			n_kwdo = new_child.as(TKwdo)
			return
		end
		if _n_block == old_child then
			n_block = new_child.as(nullable AExpr)
			return
		end
		if _n_label == old_child then
			n_label = new_child.as(nullable ALabel)
			return
		end
	end

	redef fun n_kwdo=(node)
	do
		_n_kwdo = node
		node.parent = self
	end
	redef fun n_block=(node)
	do
		_n_block = node
		if node != null then node.parent = self
	end
	redef fun n_label=(node)
	do
		_n_label = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwdo)
		v.enter_visit(_n_block)
		v.enter_visit(_n_label)
	end
end
redef class AIfExpr
	private init empty_init do end

	init init_aifexpr (
		nkwif: nullable TKwif,
		nexpr: nullable AExpr,
		nthen: nullable AExpr,
		nelse: nullable AExpr
	)
	do
		empty_init
		_n_kwif = nkwif.as(not null)
		nkwif.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_then = nthen
		if nthen != null then nthen.parent = self
		_n_else = nelse
		if nelse != null then nelse.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwif == old_child then
			n_kwif = new_child.as(TKwif)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_then == old_child then
			n_then = new_child.as(nullable AExpr)
			return
		end
		if _n_else == old_child then
			n_else = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_kwif=(node)
	do
		_n_kwif = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_then=(node)
	do
		_n_then = node
		if node != null then node.parent = self
	end
	redef fun n_else=(node)
	do
		_n_else = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwif)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_then)
		v.enter_visit(_n_else)
	end
end
redef class AIfexprExpr
	private init empty_init do end

	init init_aifexprexpr (
		nkwif: nullable TKwif,
		nexpr: nullable AExpr,
		nkwthen: nullable TKwthen,
		nthen: nullable AExpr,
		nkwelse: nullable TKwelse,
		nelse: nullable AExpr
	)
	do
		empty_init
		_n_kwif = nkwif.as(not null)
		nkwif.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_kwthen = nkwthen.as(not null)
		nkwthen.parent = self
		_n_then = nthen.as(not null)
		nthen.parent = self
		_n_kwelse = nkwelse.as(not null)
		nkwelse.parent = self
		_n_else = nelse.as(not null)
		nelse.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwif == old_child then
			n_kwif = new_child.as(TKwif)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_kwthen == old_child then
			n_kwthen = new_child.as(TKwthen)
			return
		end
		if _n_then == old_child then
			n_then = new_child.as(AExpr)
			return
		end
		if _n_kwelse == old_child then
			n_kwelse = new_child.as(TKwelse)
			return
		end
		if _n_else == old_child then
			n_else = new_child.as(AExpr)
			return
		end
	end

	redef fun n_kwif=(node)
	do
		_n_kwif = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_kwthen=(node)
	do
		_n_kwthen = node
		node.parent = self
	end
	redef fun n_then=(node)
	do
		_n_then = node
		node.parent = self
	end
	redef fun n_kwelse=(node)
	do
		_n_kwelse = node
		node.parent = self
	end
	redef fun n_else=(node)
	do
		_n_else = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwif)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_kwthen)
		v.enter_visit(_n_then)
		v.enter_visit(_n_kwelse)
		v.enter_visit(_n_else)
	end
end
redef class AWhileExpr
	private init empty_init do end

	init init_awhileexpr (
		nkwwhile: nullable TKwwhile,
		nexpr: nullable AExpr,
		nkwdo: nullable TKwdo,
		nblock: nullable AExpr,
		nlabel: nullable ALabel
	)
	do
		empty_init
		_n_kwwhile = nkwwhile.as(not null)
		nkwwhile.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_kwdo = nkwdo.as(not null)
		nkwdo.parent = self
		_n_block = nblock
		if nblock != null then nblock.parent = self
		_n_label = nlabel
		if nlabel != null then nlabel.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwwhile == old_child then
			n_kwwhile = new_child.as(TKwwhile)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_kwdo == old_child then
			n_kwdo = new_child.as(TKwdo)
			return
		end
		if _n_block == old_child then
			n_block = new_child.as(nullable AExpr)
			return
		end
		if _n_label == old_child then
			n_label = new_child.as(nullable ALabel)
			return
		end
	end

	redef fun n_kwwhile=(node)
	do
		_n_kwwhile = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_kwdo=(node)
	do
		_n_kwdo = node
		node.parent = self
	end
	redef fun n_block=(node)
	do
		_n_block = node
		if node != null then node.parent = self
	end
	redef fun n_label=(node)
	do
		_n_label = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwwhile)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_kwdo)
		v.enter_visit(_n_block)
		v.enter_visit(_n_label)
	end
end
redef class ALoopExpr
	private init empty_init do end

	init init_aloopexpr (
		nkwloop: nullable TKwloop,
		nblock: nullable AExpr,
		nlabel: nullable ALabel
	)
	do
		empty_init
		_n_kwloop = nkwloop.as(not null)
		nkwloop.parent = self
		_n_block = nblock
		if nblock != null then nblock.parent = self
		_n_label = nlabel
		if nlabel != null then nlabel.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwloop == old_child then
			n_kwloop = new_child.as(TKwloop)
			return
		end
		if _n_block == old_child then
			n_block = new_child.as(nullable AExpr)
			return
		end
		if _n_label == old_child then
			n_label = new_child.as(nullable ALabel)
			return
		end
	end

	redef fun n_kwloop=(node)
	do
		_n_kwloop = node
		node.parent = self
	end
	redef fun n_block=(node)
	do
		_n_block = node
		if node != null then node.parent = self
	end
	redef fun n_label=(node)
	do
		_n_label = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwloop)
		v.enter_visit(_n_block)
		v.enter_visit(_n_label)
	end
end
redef class AForExpr
	private init empty_init do end

	init init_aforexpr (
		nkwfor: nullable TKwfor,
		nids: Collection[Object], # Should be Collection[TId]
		nexpr: nullable AExpr,
		nkwdo: nullable TKwdo,
		nblock: nullable AExpr,
		nlabel: nullable ALabel
	)
	do
		empty_init
		_n_kwfor = nkwfor.as(not null)
		nkwfor.parent = self
		_n_ids.unsafe_add_all(nids)
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_kwdo = nkwdo.as(not null)
		nkwdo.parent = self
		_n_block = nblock
		if nblock != null then nblock.parent = self
		_n_label = nlabel
		if nlabel != null then nlabel.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwfor == old_child then
			n_kwfor = new_child.as(TKwfor)
			return
		end
		if _n_ids.replace_child(old_child, new_child) then return
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_kwdo == old_child then
			n_kwdo = new_child.as(TKwdo)
			return
		end
		if _n_block == old_child then
			n_block = new_child.as(nullable AExpr)
			return
		end
		if _n_label == old_child then
			n_label = new_child.as(nullable ALabel)
			return
		end
	end

	redef fun n_kwfor=(node)
	do
		_n_kwfor = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_kwdo=(node)
	do
		_n_kwdo = node
		node.parent = self
	end
	redef fun n_block=(node)
	do
		_n_block = node
		if node != null then node.parent = self
	end
	redef fun n_label=(node)
	do
		_n_label = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwfor)
		_n_ids.visit_all(v)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_kwdo)
		v.enter_visit(_n_block)
		v.enter_visit(_n_label)
	end
end
redef class AAssertExpr
	private init empty_init do end

	init init_aassertexpr (
		nkwassert: nullable TKwassert,
		nid: nullable TId,
		nexpr: nullable AExpr,
		nelse: nullable AExpr
	)
	do
		empty_init
		_n_kwassert = nkwassert.as(not null)
		nkwassert.parent = self
		_n_id = nid
		if nid != null then nid.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_else = nelse
		if nelse != null then nelse.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwassert == old_child then
			n_kwassert = new_child.as(TKwassert)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(nullable TId)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_else == old_child then
			n_else = new_child.as(nullable AExpr)
			return
		end
	end

	redef fun n_kwassert=(node)
	do
		_n_kwassert = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		if node != null then node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_else=(node)
	do
		_n_else = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwassert)
		v.enter_visit(_n_id)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_else)
	end
end
redef class AOnceExpr
	private init empty_init do end

	init init_aonceexpr (
		nkwonce: nullable TKwonce,
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_kwonce = nkwonce.as(not null)
		nkwonce.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwonce == old_child then
			n_kwonce = new_child.as(TKwonce)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
	end

	redef fun n_kwonce=(node)
	do
		_n_kwonce = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwonce)
		v.enter_visit(_n_expr)
	end
end
redef class ASendExpr
	private init empty_init do end

	init init_asendexpr (
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
	end
end
redef class ABinopExpr
	private init empty_init do end

	init init_abinopexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AOrExpr
	private init empty_init do end

	init init_aorexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AAndExpr
	private init empty_init do end

	init init_aandexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AOrElseExpr
	private init empty_init do end

	init init_aorelseexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AImpliesExpr
	private init empty_init do end

	init init_aimpliesexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class ANotExpr
	private init empty_init do end

	init init_anotexpr (
		nkwnot: nullable TKwnot,
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_kwnot = nkwnot.as(not null)
		nkwnot.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwnot == old_child then
			n_kwnot = new_child.as(TKwnot)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
	end

	redef fun n_kwnot=(node)
	do
		_n_kwnot = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwnot)
		v.enter_visit(_n_expr)
	end
end
redef class AEqExpr
	private init empty_init do end

	init init_aeqexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class ANeExpr
	private init empty_init do end

	init init_aneexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class ALtExpr
	private init empty_init do end

	init init_altexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class ALeExpr
	private init empty_init do end

	init init_aleexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class ALlExpr
	private init empty_init do end

	init init_allexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AGtExpr
	private init empty_init do end

	init init_agtexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AGeExpr
	private init empty_init do end

	init init_ageexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AGgExpr
	private init empty_init do end

	init init_aggexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AIsaExpr
	private init empty_init do end

	init init_aisaexpr (
		nexpr: nullable AExpr,
		ntype: nullable AType
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_type = ntype.as(not null)
		ntype.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_type)
	end
end
redef class APlusExpr
	private init empty_init do end

	init init_aplusexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AMinusExpr
	private init empty_init do end

	init init_aminusexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AStarshipExpr
	private init empty_init do end

	init init_astarshipexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AStarExpr
	private init empty_init do end

	init init_astarexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class ASlashExpr
	private init empty_init do end

	init init_aslashexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class APercentExpr
	private init empty_init do end

	init init_apercentexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
	end
end
redef class AUminusExpr
	private init empty_init do end

	init init_auminusexpr (
		nminus: nullable TMinus,
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_minus = nminus.as(not null)
		nminus.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_minus == old_child then
			n_minus = new_child.as(TMinus)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
	end

	redef fun n_minus=(node)
	do
		_n_minus = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_minus)
		v.enter_visit(_n_expr)
	end
end
redef class ANewExpr
	private init empty_init do end

	init init_anewexpr (
		nkwnew: nullable TKwnew,
		ntype: nullable AType,
		nid: nullable TId,
		nargs: nullable AExprs
	)
	do
		empty_init
		_n_kwnew = nkwnew.as(not null)
		nkwnew.parent = self
		_n_type = ntype.as(not null)
		ntype.parent = self
		_n_id = nid
		if nid != null then nid.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwnew == old_child then
			n_kwnew = new_child.as(TKwnew)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(nullable TId)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
	end

	redef fun n_kwnew=(node)
	do
		_n_kwnew = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		if node != null then node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwnew)
		v.enter_visit(_n_type)
		v.enter_visit(_n_id)
		v.enter_visit(_n_args)
	end
end
redef class AAttrExpr
	private init empty_init do end

	init init_aattrexpr (
		nexpr: nullable AExpr,
		nid: nullable TAttrid
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TAttrid)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_id)
	end
end
redef class AAttrAssignExpr
	private init empty_init do end

	init init_aattrassignexpr (
		nexpr: nullable AExpr,
		nid: nullable TAttrid,
		nassign: nullable TAssign,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_assign = nassign.as(not null)
		nassign.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TAttrid)
			return
		end
		if _n_assign == old_child then
			n_assign = new_child.as(TAssign)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_assign=(node)
	do
		_n_assign = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_id)
		v.enter_visit(_n_assign)
		v.enter_visit(_n_value)
	end
end
redef class AAttrReassignExpr
	private init empty_init do end

	init init_aattrreassignexpr (
		nexpr: nullable AExpr,
		nid: nullable TAttrid,
		nassign_op: nullable AAssignOp,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_assign_op = nassign_op.as(not null)
		nassign_op.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TAttrid)
			return
		end
		if _n_assign_op == old_child then
			n_assign_op = new_child.as(AAssignOp)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_assign_op=(node)
	do
		_n_assign_op = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_id)
		v.enter_visit(_n_assign_op)
		v.enter_visit(_n_value)
	end
end
redef class ACallExpr
	private init empty_init do end

	init init_acallexpr (
		nexpr: nullable AExpr,
		nid: nullable TId,
		nargs: nullable AExprs
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_id)
		v.enter_visit(_n_args)
	end
end
redef class ACallAssignExpr
	private init empty_init do end

	init init_acallassignexpr (
		nexpr: nullable AExpr,
		nid: nullable TId,
		nargs: nullable AExprs,
		nassign: nullable TAssign,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
		_n_assign = nassign.as(not null)
		nassign.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
		if _n_assign == old_child then
			n_assign = new_child.as(TAssign)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end
	redef fun n_assign=(node)
	do
		_n_assign = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_id)
		v.enter_visit(_n_args)
		v.enter_visit(_n_assign)
		v.enter_visit(_n_value)
	end
end
redef class ACallReassignExpr
	private init empty_init do end

	init init_acallreassignexpr (
		nexpr: nullable AExpr,
		nid: nullable TId,
		nargs: nullable AExprs,
		nassign_op: nullable AAssignOp,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
		_n_assign_op = nassign_op.as(not null)
		nassign_op.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
		if _n_assign_op == old_child then
			n_assign_op = new_child.as(AAssignOp)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end
	redef fun n_assign_op=(node)
	do
		_n_assign_op = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_id)
		v.enter_visit(_n_args)
		v.enter_visit(_n_assign_op)
		v.enter_visit(_n_value)
	end
end
redef class ASuperExpr
	private init empty_init do end

	init init_asuperexpr (
		nqualified: nullable AQualified,
		nkwsuper: nullable TKwsuper,
		nargs: nullable AExprs
	)
	do
		empty_init
		_n_qualified = nqualified
		if nqualified != null then nqualified.parent = self
		_n_kwsuper = nkwsuper.as(not null)
		nkwsuper.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_qualified == old_child then
			n_qualified = new_child.as(nullable AQualified)
			return
		end
		if _n_kwsuper == old_child then
			n_kwsuper = new_child.as(TKwsuper)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
	end

	redef fun n_qualified=(node)
	do
		_n_qualified = node
		if node != null then node.parent = self
	end
	redef fun n_kwsuper=(node)
	do
		_n_kwsuper = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_qualified)
		v.enter_visit(_n_kwsuper)
		v.enter_visit(_n_args)
	end
end
redef class AInitExpr
	private init empty_init do end

	init init_ainitexpr (
		nexpr: nullable AExpr,
		nkwinit: nullable TKwinit,
		nargs: nullable AExprs
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_kwinit = nkwinit.as(not null)
		nkwinit.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_kwinit == old_child then
			n_kwinit = new_child.as(TKwinit)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_kwinit=(node)
	do
		_n_kwinit = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_kwinit)
		v.enter_visit(_n_args)
	end
end
redef class ABraExpr
	private init empty_init do end

	init init_abraexpr (
		nexpr: nullable AExpr,
		nargs: nullable AExprs
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_args)
	end
end
redef class ABraAssignExpr
	private init empty_init do end

	init init_abraassignexpr (
		nexpr: nullable AExpr,
		nargs: nullable AExprs,
		nassign: nullable TAssign,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
		_n_assign = nassign.as(not null)
		nassign.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
		if _n_assign == old_child then
			n_assign = new_child.as(TAssign)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end
	redef fun n_assign=(node)
	do
		_n_assign = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_args)
		v.enter_visit(_n_assign)
		v.enter_visit(_n_value)
	end
end
redef class ABraReassignExpr
	private init empty_init do end

	init init_abrareassignexpr (
		nexpr: nullable AExpr,
		nargs: nullable AExprs,
		nassign_op: nullable AAssignOp,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_args = nargs.as(not null)
		nargs.parent = self
		_n_assign_op = nassign_op.as(not null)
		nassign_op.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_args == old_child then
			n_args = new_child.as(AExprs)
			return
		end
		if _n_assign_op == old_child then
			n_assign_op = new_child.as(AAssignOp)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_args=(node)
	do
		_n_args = node
		node.parent = self
	end
	redef fun n_assign_op=(node)
	do
		_n_assign_op = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_args)
		v.enter_visit(_n_assign_op)
		v.enter_visit(_n_value)
	end
end
redef class AVarExpr
	private init empty_init do end

	init init_avarexpr (
		nid: nullable TId
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end
redef class AVarAssignExpr
	private init empty_init do end

	init init_avarassignexpr (
		nid: nullable TId,
		nassign: nullable TAssign,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
		_n_assign = nassign.as(not null)
		nassign.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_assign == old_child then
			n_assign = new_child.as(TAssign)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_assign=(node)
	do
		_n_assign = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
		v.enter_visit(_n_assign)
		v.enter_visit(_n_value)
	end
end
redef class AVarReassignExpr
	private init empty_init do end

	init init_avarreassignexpr (
		nid: nullable TId,
		nassign_op: nullable AAssignOp,
		nvalue: nullable AExpr
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
		_n_assign_op = nassign_op.as(not null)
		nassign_op.parent = self
		_n_value = nvalue.as(not null)
		nvalue.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
		if _n_assign_op == old_child then
			n_assign_op = new_child.as(AAssignOp)
			return
		end
		if _n_value == old_child then
			n_value = new_child.as(AExpr)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end
	redef fun n_assign_op=(node)
	do
		_n_assign_op = node
		node.parent = self
	end
	redef fun n_value=(node)
	do
		_n_value = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
		v.enter_visit(_n_assign_op)
		v.enter_visit(_n_value)
	end
end
redef class ARangeExpr
	private init empty_init do end

	init init_arangeexpr (
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
		v.enter_visit(_n_annotations)
	end
end
redef class ACrangeExpr
	private init empty_init do end

	init init_acrangeexpr (
		nobra: nullable TObra,
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr,
		ncbra: nullable TCbra,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_obra = nobra.as(not null)
		nobra.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
		_n_cbra = ncbra.as(not null)
		ncbra.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_obra == old_child then
			n_obra = new_child.as(TObra)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
		if _n_cbra == old_child then
			n_cbra = new_child.as(TCbra)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_obra=(node)
	do
		_n_obra = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end
	redef fun n_cbra=(node)
	do
		_n_cbra = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_obra)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
		v.enter_visit(_n_cbra)
		v.enter_visit(_n_annotations)
	end
end
redef class AOrangeExpr
	private init empty_init do end

	init init_aorangeexpr (
		nobra: nullable TObra,
		nexpr: nullable AExpr,
		nexpr2: nullable AExpr,
		ncbra: nullable TObra,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_obra = nobra.as(not null)
		nobra.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_expr2 = nexpr2.as(not null)
		nexpr2.parent = self
		_n_cbra = ncbra.as(not null)
		ncbra.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_obra == old_child then
			n_obra = new_child.as(TObra)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_expr2 == old_child then
			n_expr2 = new_child.as(AExpr)
			return
		end
		if _n_cbra == old_child then
			n_cbra = new_child.as(TObra)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_obra=(node)
	do
		_n_obra = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_expr2=(node)
	do
		_n_expr2 = node
		node.parent = self
	end
	redef fun n_cbra=(node)
	do
		_n_cbra = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_obra)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_expr2)
		v.enter_visit(_n_cbra)
		v.enter_visit(_n_annotations)
	end
end
redef class AArrayExpr
	private init empty_init do end

	init init_aarrayexpr (
		nexprs: nullable AExprs,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_exprs = nexprs.as(not null)
		nexprs.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_exprs == old_child then
			n_exprs = new_child.as(AExprs)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_exprs=(node)
	do
		_n_exprs = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_exprs)
		v.enter_visit(_n_annotations)
	end
end
redef class ASelfExpr
	private init empty_init do end

	init init_aselfexpr (
		nkwself: nullable TKwself,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_kwself = nkwself.as(not null)
		nkwself.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwself == old_child then
			n_kwself = new_child.as(TKwself)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_kwself=(node)
	do
		_n_kwself = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwself)
		v.enter_visit(_n_annotations)
	end
end
redef class AImplicitSelfExpr
	private init empty_init do end

	init init_aimplicitselfexpr
	do
		empty_init
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
	end



	redef fun visit_all(v: Visitor)
	do
	end
end
redef class ATrueExpr
	private init empty_init do end

	init init_atrueexpr (
		nkwtrue: nullable TKwtrue,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_kwtrue = nkwtrue.as(not null)
		nkwtrue.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwtrue == old_child then
			n_kwtrue = new_child.as(TKwtrue)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_kwtrue=(node)
	do
		_n_kwtrue = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwtrue)
		v.enter_visit(_n_annotations)
	end
end
redef class AFalseExpr
	private init empty_init do end

	init init_afalseexpr (
		nkwfalse: nullable TKwfalse,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_kwfalse = nkwfalse.as(not null)
		nkwfalse.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwfalse == old_child then
			n_kwfalse = new_child.as(TKwfalse)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_kwfalse=(node)
	do
		_n_kwfalse = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwfalse)
		v.enter_visit(_n_annotations)
	end
end
redef class ANullExpr
	private init empty_init do end

	init init_anullexpr (
		nkwnull: nullable TKwnull,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_kwnull = nkwnull.as(not null)
		nkwnull.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwnull == old_child then
			n_kwnull = new_child.as(TKwnull)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_kwnull=(node)
	do
		_n_kwnull = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwnull)
		v.enter_visit(_n_annotations)
	end
end
redef class ADecIntExpr
	private init empty_init do end

	init init_adecintexpr (
		nnumber: nullable TNumber,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_number = nnumber.as(not null)
		nnumber.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_number == old_child then
			n_number = new_child.as(TNumber)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_number=(node)
	do
		_n_number = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_number)
		v.enter_visit(_n_annotations)
	end
end
redef class AHexIntExpr
	private init empty_init do end

	init init_ahexintexpr (
		nhex_number: nullable THexNumber,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_hex_number = nhex_number.as(not null)
		nhex_number.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_hex_number == old_child then
			n_hex_number = new_child.as(THexNumber)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_hex_number=(node)
	do
		_n_hex_number = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_hex_number)
		v.enter_visit(_n_annotations)
	end
end
redef class AFloatExpr
	private init empty_init do end

	init init_afloatexpr (
		nfloat: nullable TFloat,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_float = nfloat.as(not null)
		nfloat.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_float == old_child then
			n_float = new_child.as(TFloat)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_float=(node)
	do
		_n_float = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_float)
		v.enter_visit(_n_annotations)
	end
end
redef class ACharExpr
	private init empty_init do end

	init init_acharexpr (
		nchar: nullable TChar,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_char = nchar.as(not null)
		nchar.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_char == old_child then
			n_char = new_child.as(TChar)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_char=(node)
	do
		_n_char = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_char)
		v.enter_visit(_n_annotations)
	end
end
redef class AStringExpr
	private init empty_init do end

	init init_astringexpr (
		nstring: nullable TString,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_string = nstring.as(not null)
		nstring.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_string == old_child then
			n_string = new_child.as(TString)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_string=(node)
	do
		_n_string = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_string)
		v.enter_visit(_n_annotations)
	end
end
redef class AStartStringExpr
	private init empty_init do end

	init init_astartstringexpr (
		nstring: nullable TStartString
	)
	do
		empty_init
		_n_string = nstring.as(not null)
		nstring.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_string == old_child then
			n_string = new_child.as(TStartString)
			return
		end
	end

	redef fun n_string=(node)
	do
		_n_string = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_string)
	end
end
redef class AMidStringExpr
	private init empty_init do end

	init init_amidstringexpr (
		nstring: nullable TMidString
	)
	do
		empty_init
		_n_string = nstring.as(not null)
		nstring.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_string == old_child then
			n_string = new_child.as(TMidString)
			return
		end
	end

	redef fun n_string=(node)
	do
		_n_string = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_string)
	end
end
redef class AEndStringExpr
	private init empty_init do end

	init init_aendstringexpr (
		nstring: nullable TEndString
	)
	do
		empty_init
		_n_string = nstring.as(not null)
		nstring.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_string == old_child then
			n_string = new_child.as(TEndString)
			return
		end
	end

	redef fun n_string=(node)
	do
		_n_string = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_string)
	end
end
redef class ASuperstringExpr
	private init empty_init do end

	init init_asuperstringexpr (
		nexprs: Collection[Object], # Should be Collection[AExpr]
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_exprs.unsafe_add_all(nexprs)
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_exprs.replace_child(old_child, new_child) then return
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		_n_exprs.visit_all(v)
		v.enter_visit(_n_annotations)
	end
end
redef class AParExpr
	private init empty_init do end

	init init_aparexpr (
		nopar: nullable TOpar,
		nexpr: nullable AExpr,
		ncpar: nullable TCpar,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_opar = nopar.as(not null)
		nopar.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_cpar = ncpar.as(not null)
		ncpar.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_opar == old_child then
			n_opar = new_child.as(TOpar)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_cpar == old_child then
			n_cpar = new_child.as(TCpar)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_opar=(node)
	do
		_n_opar = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_cpar=(node)
	do
		_n_cpar = node
		node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_opar)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_cpar)
		v.enter_visit(_n_annotations)
	end
end
redef class AAsCastExpr
	private init empty_init do end

	init init_aascastexpr (
		nexpr: nullable AExpr,
		nkwas: nullable TKwas,
		nopar: nullable TOpar,
		ntype: nullable AType,
		ncpar: nullable TCpar
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_kwas = nkwas.as(not null)
		nkwas.parent = self
		_n_opar = nopar
		if nopar != null then nopar.parent = self
		_n_type = ntype.as(not null)
		ntype.parent = self
		_n_cpar = ncpar
		if ncpar != null then ncpar.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_kwas == old_child then
			n_kwas = new_child.as(TKwas)
			return
		end
		if _n_opar == old_child then
			n_opar = new_child.as(nullable TOpar)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
		if _n_cpar == old_child then
			n_cpar = new_child.as(nullable TCpar)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_kwas=(node)
	do
		_n_kwas = node
		node.parent = self
	end
	redef fun n_opar=(node)
	do
		_n_opar = node
		if node != null then node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end
	redef fun n_cpar=(node)
	do
		_n_cpar = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_kwas)
		v.enter_visit(_n_opar)
		v.enter_visit(_n_type)
		v.enter_visit(_n_cpar)
	end
end
redef class AAsNotnullExpr
	private init empty_init do end

	init init_aasnotnullexpr (
		nexpr: nullable AExpr,
		nkwas: nullable TKwas,
		nopar: nullable TOpar,
		nkwnot: nullable TKwnot,
		nkwnull: nullable TKwnull,
		ncpar: nullable TCpar
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_kwas = nkwas.as(not null)
		nkwas.parent = self
		_n_opar = nopar
		if nopar != null then nopar.parent = self
		_n_kwnot = nkwnot.as(not null)
		nkwnot.parent = self
		_n_kwnull = nkwnull.as(not null)
		nkwnull.parent = self
		_n_cpar = ncpar
		if ncpar != null then ncpar.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_kwas == old_child then
			n_kwas = new_child.as(TKwas)
			return
		end
		if _n_opar == old_child then
			n_opar = new_child.as(nullable TOpar)
			return
		end
		if _n_kwnot == old_child then
			n_kwnot = new_child.as(TKwnot)
			return
		end
		if _n_kwnull == old_child then
			n_kwnull = new_child.as(TKwnull)
			return
		end
		if _n_cpar == old_child then
			n_cpar = new_child.as(nullable TCpar)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_kwas=(node)
	do
		_n_kwas = node
		node.parent = self
	end
	redef fun n_opar=(node)
	do
		_n_opar = node
		if node != null then node.parent = self
	end
	redef fun n_kwnot=(node)
	do
		_n_kwnot = node
		node.parent = self
	end
	redef fun n_kwnull=(node)
	do
		_n_kwnull = node
		node.parent = self
	end
	redef fun n_cpar=(node)
	do
		_n_cpar = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
		v.enter_visit(_n_kwas)
		v.enter_visit(_n_opar)
		v.enter_visit(_n_kwnot)
		v.enter_visit(_n_kwnull)
		v.enter_visit(_n_cpar)
	end
end
redef class AIssetAttrExpr
	private init empty_init do end

	init init_aissetattrexpr (
		nkwisset: nullable TKwisset,
		nexpr: nullable AExpr,
		nid: nullable TAttrid
	)
	do
		empty_init
		_n_kwisset = nkwisset.as(not null)
		nkwisset.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwisset == old_child then
			n_kwisset = new_child.as(TKwisset)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_id == old_child then
			n_id = new_child.as(TAttrid)
			return
		end
	end

	redef fun n_kwisset=(node)
	do
		_n_kwisset = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwisset)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_id)
	end
end
redef class ADebugTypeExpr
	private init empty_init do end

	init init_adebugtypeexpr (
		nkwdebug: nullable TKwdebug,
		nkwtype: nullable TKwtype,
		nexpr: nullable AExpr,
		ntype: nullable AType
	)
	do
		empty_init
		_n_kwdebug = nkwdebug.as(not null)
		nkwdebug.parent = self
		_n_kwtype = nkwtype.as(not null)
		nkwtype.parent = self
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
		_n_type = ntype.as(not null)
		ntype.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwdebug == old_child then
			n_kwdebug = new_child.as(TKwdebug)
			return
		end
		if _n_kwtype == old_child then
			n_kwtype = new_child.as(TKwtype)
			return
		end
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
	end

	redef fun n_kwdebug=(node)
	do
		_n_kwdebug = node
		node.parent = self
	end
	redef fun n_kwtype=(node)
	do
		_n_kwtype = node
		node.parent = self
	end
	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end
	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwdebug)
		v.enter_visit(_n_kwtype)
		v.enter_visit(_n_expr)
		v.enter_visit(_n_type)
	end
end
redef class AListExprs
	private init empty_init do end

	init init_alistexprs (
		nexprs: Collection[Object] # Should be Collection[AExpr]
	)
	do
		empty_init
		_n_exprs.unsafe_add_all(nexprs)
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_exprs.replace_child(old_child, new_child) then return
	end



	redef fun visit_all(v: Visitor)
	do
		_n_exprs.visit_all(v)
	end
end
redef class AParExprs
	private init empty_init do end

	init init_aparexprs (
		nopar: nullable TOpar,
		nexprs: Collection[Object], # Should be Collection[AExpr]
		ncpar: nullable TCpar
	)
	do
		empty_init
		_n_opar = nopar.as(not null)
		nopar.parent = self
		_n_exprs.unsafe_add_all(nexprs)
		_n_cpar = ncpar.as(not null)
		ncpar.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_opar == old_child then
			n_opar = new_child.as(TOpar)
			return
		end
		if _n_exprs.replace_child(old_child, new_child) then return
		if _n_cpar == old_child then
			n_cpar = new_child.as(TCpar)
			return
		end
	end

	redef fun n_opar=(node)
	do
		_n_opar = node
		node.parent = self
	end
	redef fun n_cpar=(node)
	do
		_n_cpar = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_opar)
		_n_exprs.visit_all(v)
		v.enter_visit(_n_cpar)
	end
end
redef class ABraExprs
	private init empty_init do end

	init init_abraexprs (
		nobra: nullable TObra,
		nexprs: Collection[Object], # Should be Collection[AExpr]
		ncbra: nullable TCbra
	)
	do
		empty_init
		_n_obra = nobra.as(not null)
		nobra.parent = self
		_n_exprs.unsafe_add_all(nexprs)
		_n_cbra = ncbra.as(not null)
		ncbra.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_obra == old_child then
			n_obra = new_child.as(TObra)
			return
		end
		if _n_exprs.replace_child(old_child, new_child) then return
		if _n_cbra == old_child then
			n_cbra = new_child.as(TCbra)
			return
		end
	end

	redef fun n_obra=(node)
	do
		_n_obra = node
		node.parent = self
	end
	redef fun n_cbra=(node)
	do
		_n_cbra = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_obra)
		_n_exprs.visit_all(v)
		v.enter_visit(_n_cbra)
	end
end
redef class APlusAssignOp
	private init empty_init do end

	init init_aplusassignop (
		npluseq: nullable TPluseq
	)
	do
		empty_init
		_n_pluseq = npluseq.as(not null)
		npluseq.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_pluseq == old_child then
			n_pluseq = new_child.as(TPluseq)
			return
		end
	end

	redef fun n_pluseq=(node)
	do
		_n_pluseq = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_pluseq)
	end
end
redef class AMinusAssignOp
	private init empty_init do end

	init init_aminusassignop (
		nminuseq: nullable TMinuseq
	)
	do
		empty_init
		_n_minuseq = nminuseq.as(not null)
		nminuseq.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_minuseq == old_child then
			n_minuseq = new_child.as(TMinuseq)
			return
		end
	end

	redef fun n_minuseq=(node)
	do
		_n_minuseq = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_minuseq)
	end
end
redef class AModuleName
	private init empty_init do end

	init init_amodulename (
		nquad: nullable TQuad,
		npath: Collection[Object], # Should be Collection[TId]
		nid: nullable TId
	)
	do
		empty_init
		_n_quad = nquad
		if nquad != null then nquad.parent = self
		_n_path.unsafe_add_all(npath)
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_quad == old_child then
			n_quad = new_child.as(nullable TQuad)
			return
		end
		if _n_path.replace_child(old_child, new_child) then return
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
	end

	redef fun n_quad=(node)
	do
		_n_quad = node
		if node != null then node.parent = self
	end
	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_quad)
		_n_path.visit_all(v)
		v.enter_visit(_n_id)
	end
end
redef class AExternCalls
	private init empty_init do end

	init init_aexterncalls (
		nkwimport: nullable TKwimport,
		nextern_calls: Collection[Object] # Should be Collection[AExternCall]
	)
	do
		empty_init
		_n_kwimport = nkwimport.as(not null)
		nkwimport.parent = self
		_n_extern_calls.unsafe_add_all(nextern_calls)
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwimport == old_child then
			n_kwimport = new_child.as(TKwimport)
			return
		end
		if _n_extern_calls.replace_child(old_child, new_child) then return
	end

	redef fun n_kwimport=(node)
	do
		_n_kwimport = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwimport)
		_n_extern_calls.visit_all(v)
	end
end
redef class AExternCall
	private init empty_init do end

	init init_aexterncall
	do
		empty_init
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
	end



	redef fun visit_all(v: Visitor)
	do
	end
end
redef class ASuperExternCall
	private init empty_init do end

	init init_asuperexterncall (
		nkwsuper: nullable TKwsuper
	)
	do
		empty_init
		_n_kwsuper = nkwsuper.as(not null)
		nkwsuper.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwsuper == old_child then
			n_kwsuper = new_child.as(TKwsuper)
			return
		end
	end

	redef fun n_kwsuper=(node)
	do
		_n_kwsuper = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwsuper)
	end
end
redef class ALocalPropExternCall
	private init empty_init do end

	init init_alocalpropexterncall (
		nmethid: nullable AMethid
	)
	do
		empty_init
		_n_methid = nmethid.as(not null)
		nmethid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_methid == old_child then
			n_methid = new_child.as(AMethid)
			return
		end
	end

	redef fun n_methid=(node)
	do
		_n_methid = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_methid)
	end
end
redef class AFullPropExternCall
	private init empty_init do end

	init init_afullpropexterncall (
		ntype: nullable AType,
		ndot: nullable TDot,
		nmethid: nullable AMethid
	)
	do
		empty_init
		_n_type = ntype.as(not null)
		ntype.parent = self
		_n_dot = ndot
		if ndot != null then ndot.parent = self
		_n_methid = nmethid.as(not null)
		nmethid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
		if _n_dot == old_child then
			n_dot = new_child.as(nullable TDot)
			return
		end
		if _n_methid == old_child then
			n_methid = new_child.as(AMethid)
			return
		end
	end

	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end
	redef fun n_dot=(node)
	do
		_n_dot = node
		if node != null then node.parent = self
	end
	redef fun n_methid=(node)
	do
		_n_methid = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_type)
		v.enter_visit(_n_dot)
		v.enter_visit(_n_methid)
	end
end
redef class AInitPropExternCall
	private init empty_init do end

	init init_ainitpropexterncall (
		ntype: nullable AType
	)
	do
		empty_init
		_n_type = ntype.as(not null)
		ntype.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
	end

	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_type)
	end
end
redef class ACastAsExternCall
	private init empty_init do end

	init init_acastasexterncall (
		nfrom_type: nullable AType,
		ndot: nullable TDot,
		nkwas: nullable TKwas,
		nto_type: nullable AType
	)
	do
		empty_init
		_n_from_type = nfrom_type.as(not null)
		nfrom_type.parent = self
		_n_dot = ndot
		if ndot != null then ndot.parent = self
		_n_kwas = nkwas.as(not null)
		nkwas.parent = self
		_n_to_type = nto_type.as(not null)
		nto_type.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_from_type == old_child then
			n_from_type = new_child.as(AType)
			return
		end
		if _n_dot == old_child then
			n_dot = new_child.as(nullable TDot)
			return
		end
		if _n_kwas == old_child then
			n_kwas = new_child.as(TKwas)
			return
		end
		if _n_to_type == old_child then
			n_to_type = new_child.as(AType)
			return
		end
	end

	redef fun n_from_type=(node)
	do
		_n_from_type = node
		node.parent = self
	end
	redef fun n_dot=(node)
	do
		_n_dot = node
		if node != null then node.parent = self
	end
	redef fun n_kwas=(node)
	do
		_n_kwas = node
		node.parent = self
	end
	redef fun n_to_type=(node)
	do
		_n_to_type = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_from_type)
		v.enter_visit(_n_dot)
		v.enter_visit(_n_kwas)
		v.enter_visit(_n_to_type)
	end
end
redef class AAsNullableExternCall
	private init empty_init do end

	init init_aasnullableexterncall (
		ntype: nullable AType,
		nkwas: nullable TKwas,
		nkwnullable: nullable TKwnullable
	)
	do
		empty_init
		_n_type = ntype.as(not null)
		ntype.parent = self
		_n_kwas = nkwas.as(not null)
		nkwas.parent = self
		_n_kwnullable = nkwnullable.as(not null)
		nkwnullable.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
		if _n_kwas == old_child then
			n_kwas = new_child.as(TKwas)
			return
		end
		if _n_kwnullable == old_child then
			n_kwnullable = new_child.as(TKwnullable)
			return
		end
	end

	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end
	redef fun n_kwas=(node)
	do
		_n_kwas = node
		node.parent = self
	end
	redef fun n_kwnullable=(node)
	do
		_n_kwnullable = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_type)
		v.enter_visit(_n_kwas)
		v.enter_visit(_n_kwnullable)
	end
end
redef class AAsNotNullableExternCall
	private init empty_init do end

	init init_aasnotnullableexterncall (
		ntype: nullable AType,
		nkwas: nullable TKwas,
		nkwnot: nullable TKwnot,
		nkwnullable: nullable TKwnullable
	)
	do
		empty_init
		_n_type = ntype.as(not null)
		ntype.parent = self
		_n_kwas = nkwas.as(not null)
		nkwas.parent = self
		_n_kwnot = nkwnot.as(not null)
		nkwnot.parent = self
		_n_kwnullable = nkwnullable.as(not null)
		nkwnullable.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
		if _n_kwas == old_child then
			n_kwas = new_child.as(TKwas)
			return
		end
		if _n_kwnot == old_child then
			n_kwnot = new_child.as(TKwnot)
			return
		end
		if _n_kwnullable == old_child then
			n_kwnullable = new_child.as(TKwnullable)
			return
		end
	end

	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end
	redef fun n_kwas=(node)
	do
		_n_kwas = node
		node.parent = self
	end
	redef fun n_kwnot=(node)
	do
		_n_kwnot = node
		node.parent = self
	end
	redef fun n_kwnullable=(node)
	do
		_n_kwnullable = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_type)
		v.enter_visit(_n_kwas)
		v.enter_visit(_n_kwnot)
		v.enter_visit(_n_kwnullable)
	end
end
redef class AInLanguage
	private init empty_init do end

	init init_ainlanguage (
		nkwin: nullable TKwin,
		nstring: nullable TString
	)
	do
		empty_init
		_n_kwin = nkwin.as(not null)
		nkwin.parent = self
		_n_string = nstring.as(not null)
		nstring.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_kwin == old_child then
			n_kwin = new_child.as(TKwin)
			return
		end
		if _n_string == old_child then
			n_string = new_child.as(TString)
			return
		end
	end

	redef fun n_kwin=(node)
	do
		_n_kwin = node
		node.parent = self
	end
	redef fun n_string=(node)
	do
		_n_string = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_kwin)
		v.enter_visit(_n_string)
	end
end
redef class AExternCodeBlock
	private init empty_init do end

	init init_aexterncodeblock (
		nin_language: nullable AInLanguage,
		nextern_code_segment: nullable TExternCodeSegment
	)
	do
		empty_init
		_n_in_language = nin_language
		if nin_language != null then nin_language.parent = self
		_n_extern_code_segment = nextern_code_segment.as(not null)
		nextern_code_segment.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_in_language == old_child then
			n_in_language = new_child.as(nullable AInLanguage)
			return
		end
		if _n_extern_code_segment == old_child then
			n_extern_code_segment = new_child.as(TExternCodeSegment)
			return
		end
	end

	redef fun n_in_language=(node)
	do
		_n_in_language = node
		if node != null then node.parent = self
	end
	redef fun n_extern_code_segment=(node)
	do
		_n_extern_code_segment = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_in_language)
		v.enter_visit(_n_extern_code_segment)
	end
end
redef class AQualified
	private init empty_init do end

	init init_aqualified (
		nid: Collection[Object], # Should be Collection[TId]
		nclassid: nullable TClassid
	)
	do
		empty_init
		_n_id.unsafe_add_all(nid)
		_n_classid = nclassid
		if nclassid != null then nclassid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id.replace_child(old_child, new_child) then return
		if _n_classid == old_child then
			n_classid = new_child.as(nullable TClassid)
			return
		end
	end

	redef fun n_classid=(node)
	do
		_n_classid = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		_n_id.visit_all(v)
		v.enter_visit(_n_classid)
	end
end
redef class ADoc
	private init empty_init do end

	init init_adoc (
		ncomment: Collection[Object] # Should be Collection[TComment]
	)
	do
		empty_init
		_n_comment.unsafe_add_all(ncomment)
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_comment.replace_child(old_child, new_child) then return
	end



	redef fun visit_all(v: Visitor)
	do
		_n_comment.visit_all(v)
	end
end
redef class AAnnotations
	private init empty_init do end

	init init_aannotations (
		nat: nullable TAt,
		nopar: nullable TOpar,
		nitems: Collection[Object], # Should be Collection[AAnnotation]
		ncpar: nullable TCpar
	)
	do
		empty_init
		_n_at = nat
		if nat != null then nat.parent = self
		_n_opar = nopar
		if nopar != null then nopar.parent = self
		_n_items.unsafe_add_all(nitems)
		_n_cpar = ncpar
		if ncpar != null then ncpar.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_at == old_child then
			n_at = new_child.as(nullable TAt)
			return
		end
		if _n_opar == old_child then
			n_opar = new_child.as(nullable TOpar)
			return
		end
		if _n_items.replace_child(old_child, new_child) then return
		if _n_cpar == old_child then
			n_cpar = new_child.as(nullable TCpar)
			return
		end
	end

	redef fun n_at=(node)
	do
		_n_at = node
		if node != null then node.parent = self
	end
	redef fun n_opar=(node)
	do
		_n_opar = node
		if node != null then node.parent = self
	end
	redef fun n_cpar=(node)
	do
		_n_cpar = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_at)
		v.enter_visit(_n_opar)
		_n_items.visit_all(v)
		v.enter_visit(_n_cpar)
	end
end
redef class AAnnotation
	private init empty_init do end

	init init_aannotation (
		natid: nullable AAtid,
		nopar: nullable TOpar,
		nargs: Collection[Object], # Should be Collection[AAtArg]
		ncpar: nullable TCpar,
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_atid = natid.as(not null)
		natid.parent = self
		_n_opar = nopar
		if nopar != null then nopar.parent = self
		_n_args.unsafe_add_all(nargs)
		_n_cpar = ncpar
		if ncpar != null then ncpar.parent = self
		_n_annotations = nannotations
		if nannotations != null then nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_atid == old_child then
			n_atid = new_child.as(AAtid)
			return
		end
		if _n_opar == old_child then
			n_opar = new_child.as(nullable TOpar)
			return
		end
		if _n_args.replace_child(old_child, new_child) then return
		if _n_cpar == old_child then
			n_cpar = new_child.as(nullable TCpar)
			return
		end
		if _n_annotations == old_child then
			n_annotations = new_child.as(nullable AAnnotations)
			return
		end
	end

	redef fun n_atid=(node)
	do
		_n_atid = node
		node.parent = self
	end
	redef fun n_opar=(node)
	do
		_n_opar = node
		if node != null then node.parent = self
	end
	redef fun n_cpar=(node)
	do
		_n_cpar = node
		if node != null then node.parent = self
	end
	redef fun n_annotations=(node)
	do
		_n_annotations = node
		if node != null then node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_atid)
		v.enter_visit(_n_opar)
		_n_args.visit_all(v)
		v.enter_visit(_n_cpar)
		v.enter_visit(_n_annotations)
	end
end
redef class ATypeAtArg
	private init empty_init do end

	init init_atypeatarg (
		ntype: nullable AType
	)
	do
		empty_init
		_n_type = ntype.as(not null)
		ntype.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_type == old_child then
			n_type = new_child.as(AType)
			return
		end
	end

	redef fun n_type=(node)
	do
		_n_type = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_type)
	end
end
redef class AExprAtArg
	private init empty_init do end

	init init_aexpratarg (
		nexpr: nullable AExpr
	)
	do
		empty_init
		_n_expr = nexpr.as(not null)
		nexpr.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_expr == old_child then
			n_expr = new_child.as(AExpr)
			return
		end
	end

	redef fun n_expr=(node)
	do
		_n_expr = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_expr)
	end
end
redef class AAtAtArg
	private init empty_init do end

	init init_aatatarg (
		nannotations: nullable AAnnotations
	)
	do
		empty_init
		_n_annotations = nannotations.as(not null)
		nannotations.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_annotations == old_child then
			n_annotations = new_child.as(AAnnotations)
			return
		end
	end

	redef fun n_annotations=(node)
	do
		_n_annotations = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_annotations)
	end
end
redef class AIdAtid
	private init empty_init do end

	init init_aidatid (
		nid: nullable TId
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TId)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end
redef class AKwexternAtid
	private init empty_init do end

	init init_akwexternatid (
		nid: nullable TKwextern
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TKwextern)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end
redef class AKwinternAtid
	private init empty_init do end

	init init_akwinternatid (
		nid: nullable TKwintern
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TKwintern)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end
redef class AKwreadableAtid
	private init empty_init do end

	init init_akwreadableatid (
		nid: nullable TKwreadable
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TKwreadable)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end
redef class AKwwritableAtid
	private init empty_init do end

	init init_akwwritableatid (
		nid: nullable TKwwritable
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TKwwritable)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end
redef class AKwimportAtid
	private init empty_init do end

	init init_akwimportatid (
		nid: nullable TKwimport
	)
	do
		empty_init
		_n_id = nid.as(not null)
		nid.parent = self
	end

	redef fun replace_child(old_child: ANode, new_child: nullable ANode)
	do
		if _n_id == old_child then
			n_id = new_child.as(TKwimport)
			return
		end
	end

	redef fun n_id=(node)
	do
		_n_id = node
		node.parent = self
	end


	redef fun visit_all(v: Visitor)
	do
		v.enter_visit(_n_id)
	end
end

redef class Start
    redef fun replace_child(old_child: ANode, new_child: nullable ANode)
    do
        if _n_base == old_child then
            if new_child == null then
            else
                new_child.parent = self
		assert new_child isa AModule
                _n_base = new_child
            end
            old_child.parent = null
            return
	end
    end

    redef fun visit_all(v: Visitor)
    do
        if _n_base != null then
            v.enter_visit(_n_base.as(not null))
        end
	v.enter_visit(_n_eof)
    end
end
